package util

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/shangzebei/utils/stringx"

	"github.com/ddliu/go-httpclient"
	"github.com/tidwall/gjson"
	"testing"
)

func TestRemove(t *testing.T) {
	a := map[string][]string{"aaaa": {"aa", "bb"}}
	RemoveMapVale("aa", a)
	fmt.Println(a)
}

func TestAdd(t *testing.T) {
	a := map[string][]string{"aaaa": {"aa", "bb"}}
	AddMapVale("aaaa", a, "ccc")
	fmt.Println(a)
}

func TestIP(t *testing.T) {
	fmt.Println(GetOutboundIP())
}

func TestMd5Bytes(t *testing.T) {
	fmt.Println(Md5Bytes([]byte("shangzebei")))
}

func TestGetServices(t *testing.T) {

	r, _ := httpclient.Get("http://192.168.0.154:8500/v1/agent/services")
	s, _ := r.ToString()
	value := gjson.Get(s, "*.Service")
	fmt.Println(value)

}

func TestReg(t *testing.T) {
	a := `{
  "ID": "%s",
  "Name": "%s",
  "Address": "%s",
  "Port": %d,
  "EnableTagOverride": false,
  "Check": {
    "HTTP": "http://localhost:5000/health",
    "Interval": "10s"
  },
  "Weights": {
    "Passing": 10,
    "Warning": 1
  }
}`

	response, e := httpclient.Put("http://192.168.0.154:8500/v1/agent/service/register",
		bytes.NewBufferString(stringx.Fprintf(a, "gateway-one", "gateway-1", "192.168.0.107", 8888)),
	)
	fmt.Println(response.ToString())
	fmt.Println(e)
}

func TestAddDB(t *testing.T) {

	response, e := httpclient.Put(stringx.Fprintf("http://192.168.0.154:8500/v1/kv/%s", "aaa"), bytes.NewBufferString("hello"))
	fmt.Println(response.ToString())
	fmt.Println(e)
}

func TestGetDB(t *testing.T) {
	response, _ := httpclient.Get(stringx.Fprintf("http://192.168.0.154:8500/v1/kv/%s", "aaa"))
	toString, _ := response.ToString()
	fmt.Println(toString)
	var kkk []map[string]interface{}
	json.Unmarshal([]byte(toString), &kkk)
	fmt.Println(kkk)
	fmt.Println(base64.StdEncoding.DecodeString(kkk[0]["Value"].(string)))
}

func TestDelDb(t *testing.T) {

}

func TestGetserice(t *testing.T) {
	type AutoGenerated struct {
		ID      string   `json:"ID"`
		Service string   `json:"Service"`
		Tags    []string `json:"Tags"`
		Meta    struct {
		} `json:"Meta"`
		Port    int    `json:"Port"`
		Address string `json:"Address"`
		Weights struct {
			Passing int `json:"Passing"`
			Warning int `json:"Warning"`
		} `json:"Weights"`
		EnableTagOverride bool `json:"EnableTagOverride"`
	}
	r, f := httpclient.Get(stringx.Fprintf("http://192.168.0.154:8500/v1/agent/health/service/name/%s", "walletapi"))
	toString, e := r.ToString()
	fmt.Println(f, e, toString)
	value := gjson.Get(toString, "#.Service")
	var kk []AutoGenerated
	json.Unmarshal([]byte(value.String()), &kk)

}

func TestSortSlice(t *testing.T) {
	a := &BB{3}
	b := &AA{2}
	ar := []order{b, a}
	SortSlice(ar)
	for i := 0; i < len(ar); i++ {
		fmt.Println(ar[i])
	}
}

type order interface {
	Order() int
}

type AA struct {
	A int
}

func (t *AA) Order() int {
	return t.A
}
func (*AA) String() int {
	return 1
}

type BB struct {
	A int
}

func (t *BB) Order() int {
	return t.A
}
func (*BB) String() int {
	return 2
}
